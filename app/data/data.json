[
    {
        "nodeId": "Start",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "The player enters the building.\n\n[[CONTINUE|Start_Entrance]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Entrance",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Pax appears\n\nPUNY HUMAN\nWILL YOU WORSHIP ME?\n\n[[WORSHIP PAX|Pax_Worship]] [[REFUSE|Pax_Refuse]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Pax_Worship",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU WILL DO MY BIDDING\nPROVE YOUR WORTH\n<<set $Pax_Worship to 1>>\n[[ACCEPT|Pax_Gone]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Pax_Refuse",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU WILL REGRET THAT\nIN DUE TIME\n\n[[FIGHT|Pax_Fight]] [[RUN|Pax_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Pax_Gone",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Pax disappears\n\n[[CONTINUE|Start_Woman]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Pax_Fight",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You swing at Pax with your fist. He grabs it, crushing every bone. With the other hand he slices your neck open. You don't bleed, but you can feel the pain washing through and out of your body. Pax smiles and disappears, leaving your lifeless body to rot and seep into the cracks of this mysterious corridor waiting to hold up the feet of the next unfortunate visitor to this hellish place.\n\nGAME OVER",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Pax_Run",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You run from Pax\n<<set $Pax_Refuse to 1>>\n[[Continue|Start_Woman]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You see an old woman in a robe.\n\nARE YOU ALONE?\n\n[[YES|Start_Woman_Lie]] [[NO|Start_Woman_Truth]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Lie",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "DO NOT LIE TO ME\nTELL ME WHO IT IS\n\n[[LION|Start_Woman_Pax_Truth]] [[NO|Start_Woman_Refuse]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Truth",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "WHO IS HERE WITH YOU?\n\n[[LION|Start_Woman_Pax_Truth]] [[NOTHING|Start_Woman_Lie]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Pax_Truth",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THAT IS PAX\nDID YOU WORSHIP HIM?\n\n[[YES|Start_Woman_Pax_Worship]] [[NO|Start_Woman_Pax_Refuse]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Refuse",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "FINE\nPLEASE LEAVE\n\n[[QUESTION|Start_Woman_Question]] [[LEAVE|Start_Woman_Leave]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Question",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "I DO NOT LIKE LIES\nYOU MUST STOP PAX\n\n[[CONTINUE|Start_Door_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Leave",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You leave\n\n[[CONTINUE|Start_Door_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Pax_Worship",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Pax_Worship is 1>>\\\nSAVE US\nYOU WILL NEED THIS SWORD\n\n[[TAKE SWORD|Start_Woman_Pax_Sword]]\n<<else>>\\\nYOU DONT HAVE THE EYES\nYOU CAN STILL BE SAVED\nTAKE THIS DAGGER\n\n[[TAKE DAGGER|Start_Woman_Pax_Dagger]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Pax_Worship==1) { return `\\\nSAVE US\nYOU WILL NEED THIS SWORD\n\n[[TAKE SWORD|Start_Woman_Pax_Sword]]\n`;} else { return `\\\nYOU DONT HAVE THE EYES\nYOU CAN STILL BE SAVED\nTAKE THIS DAGGER\n\n[[TAKE DAGGER|Start_Woman_Pax_Dagger]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Woman_Pax_Refuse",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Pax_Worship = 1>>\\\nYOU HAVE THE EYES\nTAKE THE DAGGER AND LEAVE\n\n[[TAKE DAGGER|Start_Woman_Pax_Dagger]]\n<<else>>\\\nYOU CAN SAVE US\nYOU CAN STILL BE SAVED\nTAKE THIS SWORD\n\n[[TAKE SWORD|Start_Woman_Pax_Sword]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Pax_Worship = 1) { return `\\\nYOU HAVE THE EYES\nTAKE THE DAGGER AND LEAVE\n\n[[TAKE DAGGER|Start_Woman_Pax_Dagger]]\n`;} else { return `\\\nYOU CAN SAVE US\nYOU CAN STILL BE SAVED\nTAKE THIS SWORD\n\n[[TAKE SWORD|Start_Woman_Pax_Sword]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Woman_Pax_Sword",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You grab the sword\n<<set $Sword to 1>>\\\n[[CONTINUE|Start_Door_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Woman_Pax_Dagger",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You grab the dagger\n<<set $Dagger to 1>>\n[[CONTINE|Start_Door_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Door_Puzzle",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You can go forward or right\n\n[[FORWARD|Start_Door]] [[RIGHT|Start_Key_1]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Key_1",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THERE IS A DIRTY KEY SITTING ON THE GROUND.\n\n[[PICK UP|Start_Key_Pickup]] [[CLEAN|Start_Key_Clean]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Key_Pickup",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU PICK UP THE DIRTY KEY\n<<set $Start_Key to 1>>\\\n[[RETURN|Start_Door]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Key_Clean",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE KEY IS CLEAN\nYOU PICK IT UP\n<<set $Start_Key to 1; $Clean_Key to 1>>\\\n[[RETURN|Start_Door]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Door",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE DOOR IS LOCKED\n<<if $Start_Key is 1>>\\\n\n[[UNLOCK|Start_Door_Rat]]\n<<else>>\\\n\n[[RETURN|Start_Door_Puzzle]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Start_Key==1) { return `THE DOOR IS LOCKED\n\\\n\n[[UNLOCK|Start_Door_Rat]]\n`;} else { return `THE DOOR IS LOCKED\n\\\n\n[[RETURN|Start_Door_Puzzle]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Door_Rat",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "A rat appears\n\nSCREECH\n\n[[STAB RAT|Start_Rat_Stab]] [[KICK RAT|Start_Rat_Kick]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Rat_Stab",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Dagger is 1>>\\\nYOU STAB THE RAT\nIT DIES\n\n[[CONTINUE|Start_Ratnest]] [[SKIN RAT|Start_Rat_Skin]]\n<<else if $Sword is 1>>\\\nYOU STAB THE RAT\nIT DIES\n\n[[CONTINUE|Start_Ratnest]]\n<<else>>\\\nYOU STAB THE RAT\nIT BITES YOUR FINGER\n\n[[PUNCH RAT|Start_Rat_Punch]] [[STOMP RAT|Start_Rat_Stomp]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Dagger==1) { return `\\\nYOU STAB THE RAT\nIT DIES\n\n[[CONTINUE|Start_Ratnest]] [[SKIN RAT|Start_Rat_Skin]]\n`; } else if( $Sword==1) { return `\\\nYOU STAB THE RAT\nIT DIES\n\n[[CONTINUE|Start_Ratnest]]\n`;} else { return `\\\nYOU STAB THE RAT\nIT BITES YOUR FINGER\n\n[[PUNCH RAT|Start_Rat_Punch]] [[STOMP RAT|Start_Rat_Stomp]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Rat_Kick",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU KICK THE RAT\nIT RUNS AWAY\nYOUR FOOT HURTS\n<<set Rat_Run to 1: Foot_Hurt to 1>>\\\n\n[[CONTINUE|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you can go left or right\n\n[[LEFT|Start_Ratnest_Nest]] [[RIGHT|Start_Ratnest_Crossroad]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Rat_Skin",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU SKIN THE RAT\nYOU HAVE THE SKIN\n<<set $Rat_Skin to 1>>\n[[CONTINUE|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Rat_Punch",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU PUNCH THE RAT\nIT RUNS AWAY\n<<set $Rat_Run to 1>>\n[[CONTINUE|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Rat_Stomp",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU STOMP THE RAT\nIT DIES GRUESOMELY\n\n[[CONTINUE|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Nest",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Chandelier is 1>>\\\nyou see a nest on the ground, burning from the candles on the chandelier that has fallen on it. The ground is burning.\n\n[[JUMP|Start_Ratnest_Jump]] [[WALK|Start_Ratnest_Walk]]\n<<else>>\\\nyou see a nest on the ground. A chandelier of candles is above it.\n\n[[CHANDELIER|Start_Ratnest_Chandelier]] [[NEST|Start_Ratnest_Interact]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Chandelier==1) { return `\\\nyou see a nest on the ground, burning from the candles on the chandelier that has fallen on it. The ground==burning.\n\n[[JUMP|Start_Ratnest_Jump]] [[WALK|Start_Ratnest_Walk]]\n`;} else { return `\\\nyou see a nest on the ground. A chandelier of candles==above it.\n\n[[CHANDELIER|Start_Ratnest_Chandelier]] [[NEST|Start_Ratnest_Interact]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Ratnest_Crossroad",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you can go left or right.\n\n[[LEFT|Start_Ratnest_Table]] [[RIGHT|Start_Ratnest_Door]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Chandelier",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "A GOLD CHANDELIER\nIT SWINGS SLIGHTLY\n\n[[SLICE DOWN|Start_Ratnest_Chandelier_Slice]] [[RETURN|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Interact",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU TOUCH THE NEST\nA RAT EYES YOU ANGRILY FROM INSIDE\n\n[[RETURN|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Table",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you see a table with a combination lock and a map on it\n\n[[LOCK|Start_Ratnest_Lock]] [[MAP|Start_Ratnest_Map]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Door",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You see a door that is boarded up with old wooden planks. On each plank is a symbol.\n\n[[BREAK BOARDS|Start_Ratnest_Door_Open]] [[RETURN|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Door_Open",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Hammer is 1>>\\\nYOU BREAK THE BOARDS\nTHE DOOR IS UNLOCKED\n\n[[CONTINUE|Start_Ratnest_Door_Unlocked]]\n<<else>>\\\nYOU HAVE NOTHING\nTO BREAK THE BOARDS\n\n[[RETURN|Start_Ratnest]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Hammer==1) { return `\\\nYOU BREAK THE BOARDS\nTHE DOOR IS UNLOCKED\n\n[[CONTINUE|Start_Ratnest_Door_Unlocked]]\n`;} else { return `\\\nYOU HAVE NOTHING\nTO BREAK THE BOARDS\n\n[[RETURN|Start_Ratnest]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Ratnest_Door_Unlocked",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Double-click this passage to edit it.",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Lock",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you see a lock. there are 4 digits to enter\n\nthe player can put them in correct or incorrect. (there is no choice here, just the lock)\n\n[[CORRECT|Start_Ratnest_Lock_Correct]] [[INCORRECT|Start_Ratnest_Lock_Incorrect]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Map",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU TAKE THE MAP\nYOU CAN SEE NOW\n<<set $map to 1>>\n[[RETURN|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Lock_Correct",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE LOCK CLICKS\nYOU HEAR A CRASH NEARBY\n<<set $Chandelier to 1>>\n[[RETURN|Start_Ratnest]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Lock_Incorrect",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE LOCK DOES NOT CLICK\nIT IS WRONG\n\n[[RETURN|Start_Ratnest]] [[TRY AGAIN|Start_Ratnest_Lock]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Jump",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Sword is 1>>\\\nYOU JUMP OVER THE FIRE\nYOUR SWORD CUTS YOUR LEG\n\n[[CONTINUE|Start_Chained]]\n<<else>>\\\nYOU JUMP OVER THE FIRE PERFECTLY\n\n[[CONTINUE|Start_Chained]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Sword==1) { return `\\\nYOU JUMP OVER THE FIRE\nYOUR SWORD CUTS YOUR LEG\n\n[[CONTINUE|Start_Chained]]\n`;} else { return `\\\nYOU JUMP OVER THE FIRE PERFECTLY\n\n[[CONTINUE|Start_Chained]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Ratnest_Walk",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU WALK THROUGH THE FIRE\nYOUR PANTS BURN\n<<set $Pants_Burnt to 1>>\n[[CONTINUE|Start_Chained]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Ratnest_Chandelier_Slice",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Sword is 1>>\\\nYOU SWING AT THE CHANDELIER\nIT SWINGS MORE\n\n[[RETURN|Start_Ratnest]]\n<<else if $Dagger is 1>>\\\nYOU SWING AT THE CHANDELIER\nYOUR DAGGER DULLS\n<<set $Dagger_Dull to 1>>\\\n\n[[RETURN|Start_Ratnest]]\n<<else>>\\\nYOU SLAP THE CHANDELIER\nIT HURTS YOUR HAND SLIGHTLY\n\n[[RETURN|Start_Ratnest]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Sword==1) { return `\\\nYOU SWING AT THE CHANDELIER\nIT SWINGS MORE\n\n[[RETURN|Start_Ratnest]]\n`; } else if( $Dagger==1) { return `\\\nYOU SWING AT THE CHANDELIER\nYOUR DAGGER DULLS\n{{set $Dagger_Dull to 1}}\\\n\n[[RETURN|Start_Ratnest]]\n`;} else { return `\\\nYOU SLAP THE CHANDELIER\nIT HURTS YOUR HAND SLIGHTLY\n\n[[RETURN|Start_Ratnest]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Chained",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you see a man chained up to the wall. there is a pouch attached to his body.\n\nHE IS UNCONCIOUS\n\n[[STEAL POUCH|Start_Chained_Steal]] [[TALK TO MAN|Start_Chained_Talk]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Steal",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU GRAB THE POUCH AND RUN AWAY\nYOU HEAR A SCREAM BEHIND YOU\n<<set $Chained_Steal to 1>>\n[[RUN|Start_Chained_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Talk",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "HIS EYES OPEN WHEN YOU TAP HIM\nHE EYES YOU CAUTIOUSLY\n\n[[GREET|Start_Chained_Greet]] [[QUESTION|Start_Chained_Question]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Run",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you come to a crossroads. you can go left or right. stealing from the chained man opens up the right path.\n\n[[LEFT|Start_Worm]] [[RIGHT|Start_Hole]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you encounter a large worm that has come from a hole in the wall\n\nTHE WALL WORM LUNGES\n\n[[RUN|Start_Chained_Run]] [[DEFEND|Start_Worm_Defend]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Hole",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you see a hole in the ground.\n\n[[ENTER HOLE|Start_Hole_Enter]] [[TURN BACK|Start_Chained_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Crypt_Hole",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU FEEL A TUG\nSOMETHING HAS YOUR LEG\n\n[[ATTACK|Crypt_Worm_Attack]] [[RUN|Crypt_Worm_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Greet",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "CAN YOU HELP ME?\nIVE BEEN CHAINED UP FOR MY GOOD DEEDS\n\n[[HELP|Start_Chained_Help]] [[QUESTION|Start_Chained_Question]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Question",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "I BROUGHT THE PEOPLE WHAT THEY NEEDED\nI WAS EXILED AND CHAINED UP\n\n[[FREEDOM?|Start_Chained_Freedom]] [[PEOPLE|Start_Chained_People]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Crypt_Worm_Attack",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Sword is 1>>\\\nYOU STAB THE UNKNOWN CREATURE\nIT SCREECHES AND LETS GO\n\n[[CONTINUE|Crypt_Start_Hole]]\n<<else if $Dagger is 1>>\\\nYOU STAB THE UNKNOWN CREATURE\nIT TAKES A LAST BITE AND LETS GO\n\n[[CONTINUE|Crypt_Start_Hole]]\n<<else>>\\\nYOU HIT THE UNKNOWN CREATURE\nIT BITES OFF YOUR FINGER AND RUNS AWAY\n<<set $Finger_Gone to 1>>\n[[CONTINUE|Crypt_Start_Hole]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Sword==1) { return `\\\nYOU STAB THE UNKNOWN CREATURE\nIT SCREECHES AND LETS GO\n\n[[CONTINUE|Crypt_Start_Hole]]\n`; } else if( $Dagger==1) { return `\\\nYOU STAB THE UNKNOWN CREATURE\nIT TAKES A LAST BITE AND LETS GO\n\n[[CONTINUE|Crypt_Start_Hole]]\n`;} else { return `\\\nYOU HIT THE UNKNOWN CREATURE\nIT BITES OFF YOUR FINGER AND RUNS AWAY\n{{set $Finger_Gone to 1}}\n[[CONTINUE|Crypt_Start_Hole]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Crypt_Worm_Run",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU CRAWL FASTER THROUGH THE HOLE\nIT LETS GO\n\n[[CONTINUE|Crypt_Start_Hole]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Freedom",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "I MUST HAVE FREEDOM\nTO HELP THE PEOPLE\n\n[[HOW?|Start_Chained_How]] [[WHY?|Start_Chained_Why]]\n",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_People",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "I HELPED THE PEOPLE OF MY TOWN\nTHE RULER PUNISHED ME\n\n[[TOWN|Start_Chained_Town]] [[RULER|Start_Chained_Ruler]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Help",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THANK YOU KIND ONE\nI MUST BE FREED\n\n[[HOW?|Start_Chained_How]] [[WHY?|Start_Chained_Why]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_How",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "KILL THE RULER\nMY BINDINGS WILL UNCLASP\n<<set $Chained_Save to 1>>\n[[THANK YOU|Start_Chained_Thank]] [[GOODBYE|Start_Chained_Goodbye]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Why",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "DO YOU NOT WANT FREEDOM?\nYOU ARE TRAPPED TOO\n\n[[I AM FREE|Start_Chained_You_Free]] [[I AM TRAPPED|Start_Chained_You_Trapped]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Town",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "IN THE PLACE THEY CALL FOHUN\nTHEY HAVE NO FREEDOM\n\n[[WHERE?|Start_Chained_Where]] [[YOU|Start_Chained_You]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Ruler",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "HE IS BLIND TO THE WORLD\nHIS LACK OF EMPATHY MEANS HE MUST DIE\n\n[[KILL|Start_Chained_Ruler_Kill]] [[REFUSE|Start_Chained_Ruler_Save]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Where",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "WHERE THE GROUND IS PURE GLASS\nYOU WILL FIND HIM\n\n[[LEAVE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_You",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THAT DOES NOT MATTER\nFIND HIM\n\n[[LEAVE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Thank",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Pax_Worship is 1>>\\\nTHANK YOU HERO OF THE YELLOW EYES\nYOU WILL SAVE US\n\n[[LEAVE|Start_Chained_Continue]]\n<<else>>\\\nNO\nTHANK YOU\n\n[[LEAVE|Start_Chained_Continue]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Pax_Worship==1) { return `\\\nTHANK YOU HERO OF THE YELLOW EYES\nYOU WILL SAVE US\n\n[[LEAVE|Start_Chained_Continue]]\n`;} else { return `\\\nNO\nTHANK YOU\n\n[[LEAVE|Start_Chained_Continue]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Chained_Goodbye",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "GO AHEAD\nDO NOT BREAK THE BROKEN WALL\n\n[[LEAVE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Continue",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU LEAVE\nHE RETURNS TO HIS TORTURED SLEEP\n\n[[CONTINUE|Start_Chained_Crossroads]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Crossroads",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "there is a corssroads, the left is open but the right is a weak wall\n\n[[LEFT|Start_Worm]] [[RIGHT|Start_Crossroads_Wall]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Crossroads_Wall",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You see a cracked wall.\n\n[[BREAK|Start_Crossroads_Break_Wall]] [[TURN AROUND|Start_Chained_Crossroads]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_You_Free",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Pax_Worship is 1>>\\\nARE YOU REALLY\nFREE\n\n[[YES|Start_Chained_Free_Yes]] [[NO|Start_Chained_Free_No]]\n<<else>>\\\nTHEN LET ME BE FREE TOO\n\n[[YES|Start_Chained_Save]] [[LEAVE|]]\n",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Pax_Worship==1) { return `\\\nARE YOU REALLY\nFREE\n\n[[YES|Start_Chained_Free_Yes]] [[NO|Start_Chained_Free_No]]\n`;} else { return `\\\nTHEN LET ME BE FREE TOO\n\n[[YES|Start_Chained_Save]] [[LEAVE|]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Chained_You_Trapped",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "DONT LET OTHERS BECOME TRAPPED AS WELL\nSAVE ME PLEASE\n\n[[AGREE|Start_Chained_Save]] [[LEAVE|Start_Chained_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Save",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU ARE MY SAVIOUR\nI WILL REMEMBER YOUR GOOD DEEDS\n<<set $Chained_Save to 1>>\n[[THANK YOU|Start_Chained_Thank]] [[GOODBYE|Start_Chained_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Ruler_Kill",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU ARE A HERO\nGO FIND HIM\n\n[[CONTINUE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Ruler_Save",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "NOT ALL PEOPLE\nDESERVE TO LIVE\n\n[[QUESTION|Start_Chained_Question_Die]] [[MURDER|Start_Chained_Kill]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Free_Yes",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU ARE AS BLIND AS HIM\nLEAVE MY SIGHT\n\n[[LEAVE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Free_No",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOUR UNDERSTANDING IS GOOD\nPLEASE KILL THE BLIND RULER\n<<set $Chained_Save to 1>>\n[[CONTINUE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Question_Die",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU DO NOY DESERVE TO LIVE\nGET OUT OF MY SIGHT\n\n[[LEAVE|Start_Chained_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Kill",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOUR SWORD PASSES THROUGH HIS STOMACH\nHE DIES INSTANTLY\n<<set Chained_Kill to 1>>\n[[CONTINUE|Start_Chained_Pax]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "pax appears\n\n<<if $Pax_Worship is 1>>\nHELLO AGAIN MORTAL\nEAGER TO START?\n\n[[YES|Start_Chained_Pax_Worship_Yes]] [[NO|Start_Chained_Pax_Worship_No]]\n<<else>>\nYOU WOULD BE PERFECT\nTHIS IS YOUR LAST CHANCE\n[[WORSHIP PAX|Start_Chained_Pax_Worship]] [[REFUSE|Start_Chained_Pax_Refuse]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Pax_Worship==1) { return `pax appears\n\n\nHELLO AGAIN MORTAL\nEAGER TO START?\n\n[[YES|Start_Chained_Pax_Worship_Yes]] [[NO|Start_Chained_Pax_Worship_No]]\n`;} else { return `pax appears\n\n\nYOU WOULD BE PERFECT\nTHIS IS YOUR LAST CHANCE\n[[WORSHIP PAX|Start_Chained_Pax_Worship]] [[REFUSE|Start_Chained_Pax_Refuse]]`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Worm_Defend",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Sword is 1>>\\\nTHE WORM LUNGES\nYOUR SWORD HILT STOPS IT\n\n[[REPOSITION|Start_Worm_Reposition]] [[SLICE|Start_Worm_Slice]]\n<<else if $Dagger is 1>>\\\nTHE WORM LUNGES\nYOU BLOCK YOURSELF FROM ITS GNASHING TEETH\n\n[[STAB|Start_Worm_Stab]] [[REPOSITION|Start_Worm_Reposition]]\n<<else>>\\\nTHE WORM LUNGES\nIT BITES YOUR ARM\n\n[[THROW|Start_Worm_Throw]] [[REPOSITION|Start_Worm_Reposition]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Sword==1) { return `\\\nTHE WORM LUNGES\nYOUR SWORD HILT STOPS IT\n\n[[REPOSITION|Start_Worm_Reposition]] [[SLICE|Start_Worm_Slice]]\n`; } else if( $Dagger==1) { return `\\\nTHE WORM LUNGES\nYOU BLOCK YOURSELF FROM ITS GNASHING TEETH\n\n[[STAB|Start_Worm_Stab]] [[REPOSITION|Start_Worm_Reposition]]\n`;} else { return `\\\nTHE WORM LUNGES\nIT BITES YOUR ARM\n\n[[THROW|Start_Worm_Throw]] [[REPOSITION|Start_Worm_Reposition]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Worm_Reposition",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU JUMP BEHIND THE WORM\nIT IS OUT OF THE HOLE\n\n[[ATTACK|Start_Worm_Reposition_Attack]] [[ENTER HOLE|Start_Worm_Hole_Enter]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Slice",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU TURN TO THE WORM AND SLASH THROUGH ITS EYE\nIT LUNGES AT YOU IN ANGER\n\n[[ATTACK|Start_Worm_Lunge_Attack]] [[DEFEND|Start_Worm_Lunge_Defend]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Stab",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU STAB THE WORM IN THE HEAD\nIT SCREECHES OUT AS IT SLOWLY DIES\n\n[[SKIN BODY|Start_Worm_Skin]]\n",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Throw",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU GRAB THE WORM AND THROW WITH ALL YOUR STRENGTH\nIT DIES ON IMPACT WITH THE WALL\n\n[[SEARCH|Start_Worm_Hands_Search]] [[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Lunge_Attack",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU SLICE IT IN HALF WHILE IT FLIES THROUGH THE AIR\nTWO HALVES FALL TO THE GROUND\n\n[[SEARCH|Start_Worm_Sword_Search]] [[LEAVE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Lunge_Defend",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOUR SWORD BREAKS FROM THE IMPACT\nYOU STILL HAVE THE HILT\n\n[[BASH|Start_Worm_Lunge_Bash]] [[PUNCH|Start_Worm_Lunge_Punch]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Reposition_Attack",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU SLICE HALF THE BODY OFF\nIT SLOWS DOWN AND SUFFERS\n\n[[KILL|Start_Worm_Reposition_Kill]] [[LEAVE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Enter",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU ENTER THE HOLE\nTHE WORM DOES NOT DARE FOLLOW\n\n[[CRAWL|Start_Worm_Hole_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Lunge_Bash",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE WORM LUNGES AGAIN\nYOU KNOCK IT OUT WITH YOUR HILT\n\n[[KILL|Start_Worm_Hilt_Kill]] [[LEAVE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Lunge_Punch",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU PUNCH THE WORM\nIT BITES YOUR FINGER\n\n[[BASH|Start_Worm_Lunge_Bash]] [[KICK|Start_Worm_Punch_Kick]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Puzzle",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you see a door and a path leading to the right\n\n[[DOOR|Start_Final_Door]] [[RIGHT|Start_Final_Right]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Reposition_Kill",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU END ITS MISERY\nTHE BLOOD SEEPS INTO THE DIRT ON THE GROUND\n\n[[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Continue",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU CRAWL THROUGH THE HOLE\nTHE WALLS ARE BREATHING\n\n[[BREATHE ALONG|Start_Worm_Hole_Breathe]] [[HOLD BREATH|Start_Worm_Hole_Hold]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Skin",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU SLICE THE SKIN OFF\nIT IS YOURS NOW\n<<set $Worm_Skin to 1>>\n[[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Sword_Search",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "ITS TAIL HARDENS INTO A CLUB\nYOU TAKE IT WITH YOU\n<<set $Worm_Club to 1>>\n[[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hands_Search",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE TAIL HARDENS INTO A MACE AND FALLS OFF\nYOU GRAB IT\n<<set $Worm_Mace to 1>>\n[[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hilt_Kill",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU SLIDE THE BROKEN BLADE INTO THE WORMS HEAD\nTHE ENTIRE BODY HARDENS AND THE TAIL FALLS OFF\n\n[[GRAB TAIL|Start_Worm_Loot]] [[LEAVE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Loot",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU DROP YOUR HILT AND PICK UP THE TAIL\nIT WORKS AS A CLUB\n<<set $Worm_Club to 1>>\n[[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Punch_Kick",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU KICK THE WORMS TAIL\nIT SLITHERS BACK INTO THE HOLE\n\n[[FOLLOW|Start_Worm_Hole_Continue]] [[CONTINUE|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Crypt_Start_Hole",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU CRAWL OF THE HOLE\nA DOOR STANDS IN YOUR WAY\n\n[[OPEN DOOR|Crypt_Entrance_Second]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Worship_Yes",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "GOOD\nTAKE THE SOUL OF THE ONE WRAPPED IN RED\n\n[[ACCEPT|Start_Chained_Pax_Redhood_Accept]][[REFUSE|Start_Chained_Pax_Redhood_Refuse]]]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Worship_No",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Double-click this passage to edit it.",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Worship",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU HAVE MADE A WISE DECISION\nTAKE THE SOUL OF THE ONE WRAPPED IN RED\n\n[[ACCEPT|Start_Chained_Pax_Redhood_Accept]][[REFUSE|Start_Chained_Pax_Redhood_Refuse]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Refuse",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "FILTHY HUMAN\nWHY DO YOU HAVE FREE WILL\n\n[[PUNCH|Start_Chained_Pax_Punch]] [[PUNCH|Start_Chained_Pax_Punch]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Redhood_Accept",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THIS IS WEAK BUT TAKE IT\nI WILL INCREASE THE POWER AS YOU WORSHIP\n\n[[TAKE HAND|Start_Chained_Pax_Redhood_Accept_Hand]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Redhood_Refuse",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU HAVE MADE A DECISION\nTAKE THE SOUL OF THE ONE WRAPPED IN RED\n\n[[ACCEPT|Start_Chained_Pax_Redhood_Accept]] [[ACCEPT|Start_Chained_Pax_Redhood_Accept]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Redhood_Accept_Hand",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU TAKE THE HAND OF PAX\nIT DOES NOTHING YET\n\n[[CONTINUE|Start_Chained_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Chained_Pax_Punch",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU SWING AT PAX\nHE DISAPPEARS INTO THE DARK\n\n[[CONTINUE|Start_Chained_Run]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Breathe",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU BREATHE IN AND OUT\nTHE WALL JOINS YOU AND PUSHES YOU FARTHER\n\n[[CONTINUE|Start_Worm_Hole_Exit]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Hold",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU HOLD YOUR BREATH\nTHE WALLS STOP MOVING\n\n[[CONTINUE|Start_Worm_Hole_Hold_Continue]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Exit",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU CRAWL OUT OF THE HOLE WITH NO ENERGY LEFT\nYOU SINK ONTO THE FLOOR\n\n[[GET UP|Start_Worm_Hole_Up]] [[STAY THERE|Start_Worm_Hole_Stay]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Hold_Continue",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE WALL IN FRONT OF YOU IS CLOSED\nTHE HOLE SLOWLY GETS SMALLER\n\n[[BLOW|Start_Worm_Hole_Hold_Blow]] [[PUNCH|Start_Worm_Hole_Hold_Punch]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Hold_Blow",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU BLOW ON THE HOLE\nIT RETRACTS QUICKLY\n\n[[CRAWL THROUGH|Start_Worm_Hole_Exit]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Hold_Punch",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU PUNCH THE HOLE\nYOU FEEL A PAIN IN YOUR GUT\n\n[[PUNCH AGAIN|Start_Worm_Hole_Hold_Punch_Again]] [[BLOW|Start_Worm_Hole_Hold_Blow]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Hold_Punch_Again",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You punch the living wall one more time. As your fist comes in contact with the slowly growing hole, it sucks in on it. You try to pull your hand free, ripping the skin off. You can feel the walls slowly pushing on you out of anger. Eventually, you can't take it any longer and give in to the pressure. The walls crush every bone in your body, yet you don't scream. Your body is finally connected to the walls, as it should be.\n\nGAME OVER",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Crossroads_Break_Wall",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Double-click this passage to edit it.",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Up",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "AS NICE AS THE GROUND IS\nYOU MUST STAND UP\n\n[[CONTINUE|Wormhole_Start]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Stay",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU STAY STILL WHILE YOU BREATHE IN AND OUT\nIT IS NICE\n\n[[SLEEP|Start_Worm_Hole_Sleep]] [[GET UP|Start_Worm_Hole_Up]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Worm_Hole_Sleep",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You close your eyes. You haven't slept in days. It feels nice. Ever since you set out to find this building you haven't taken time to enjoy the little things. You think of why you even are here. You don't remember but it doesn't matter. This is too relaxing to worry about anything now. As you sleep, the ground slowly embraces you and pulls you in. The ground is warm. The ground is soft. You dream of the ocean and it's many beauties.\n\nGAME OVER",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Hole_Enter",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU CLIMB DOWN THE HOLE\nIT IS DARK\n\n[[CLIMB OUT|Start_Hole_Climb]] [[GO DEEPER|Crypt_Hole]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Hole_Climb",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU DONT LIKE THE HOLE\nYOU CLIMB OUT\n\n[[CONTINUE|Start_Chained_Crossroads]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Wormhole_Start",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Not done writing this",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Door",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "the door has 4 slots for symbols. The ring is lighter than the rest. The chalice is darker than the rest.\n\n<<if $Stone_Hammer is 1>>\\\nIT IS A DOOR\nYOU HAVE THE HAMMER\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Hammer]]\n<<else if $Stone_Chalice is 1>>\\\nIT IS A DOOR\nYOU HAVE THE CHALICE\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Chalice]]\n<<else if $Stone_Knife is 1>>\\\nIT IS A DOOR\nYOU HAVE THE KNIFE\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Knife]]\n<<else if $Stone_Ring is 1>>\\\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Ring]]\n<<else>>\\\nIT IS A DOOR\nIT NEEDS LOVE\n\n[[TURN AROUND|Start_Final_Puzzle]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Stone_Hammer==1) { return `the door has 4 slots for symbols. The ring==lighter than the rest. The chalice==darker than the rest.\n\n\\\nIT IS A DOOR\nYOU HAVE THE HAMMER\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Hammer]]\n`; } else if( $Stone_Chalice==1) { return `the door has 4 slots for symbols. The ring==lighter than the rest. The chalice==darker than the rest.\n\n\\\nIT IS A DOOR\nYOU HAVE THE CHALICE\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Chalice]]\n`; } else if( $Stone_Knife==1) { return `the door has 4 slots for symbols. The ring==lighter than the rest. The chalice==darker than the rest.\n\n\\\nIT IS A DOOR\nYOU HAVE THE KNIFE\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Knife]]\n`; } else if( $Stone_Ring==1) { return `the door has 4 slots for symbols. The ring==lighter than the rest. The chalice==darker than the rest.\n\n\\\n\n[[TURN AROUND|Start_Final_Puzzle]] [[INSERT STONE|Start_Final_Ring]]\n`;} else { return `the door has 4 slots for symbols. The ring==lighter than the rest. The chalice==darker than the rest.\n\n\\\nIT IS A DOOR\nIT NEEDS LOVE\n\n[[TURN AROUND|Start_Final_Puzzle]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Final_Right",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "you come to a crossroads\n\n[[LEFT|Start_Final_Cross_Left]] [[RIGHT|Start_Final_Cross_Right]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Cross_Left",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THERE ARE TWO RIGID STONES\n\n[[APPROACH|Start_Final_Left_Stones]] [[WALK AWAY|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Cross_Right",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THERE ARE TWO SOFT STONES\n\n[[APPROACH|Start_Final_Right_Stones]] [[WALK AWAY|Start_Final_Puzzle]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Crypt_Main_Entrance",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THERE IS ANOTHER DOOR\n\n[[ENTER|Crypt_Main_Start]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Crypt_Entrance_Second",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Double-click this passage to edit it.",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Right_Stones",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Right_Stone is 1>>\\\nTHE STONES DISAPPEAR\nTHERE IS NOTHING LEFT\n\n[[GO BACK|Start_Final_Puzzle]]\n<<else>>\\\nTHE STONES PUSH YOU AWAY\nYOU PERSIST\n\n[[GRAB LEFT|Start_Final_Right_Left]] [[GRAB RIGHT|Start_Final_Right_Right]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Right_Stone==1) { return `\\\nTHE STONES DISAPPEAR\nTHERE IS NOTHING LEFT\n\n[[GO BACK|Start_Final_Puzzle]]\n`;} else { return `\\\nTHE STONES PUSH YOU AWAY\nYOU PERSIST\n\n[[GRAB LEFT|Start_Final_Right_Left]] [[GRAB RIGHT|Start_Final_Right_Right]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Final_Left_Stones",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "<<if $Stone is 1>>\\\nTHE STONES DISAPPEAR\nTHERE IS NOTHING LEFT\n\n[[GO BACK|Start_Final_Puzzle]]\n<<else>>\\\nTHE STONES PULL YOU CLOSER\nYOU STAND STRONG\n\n[[GRAB LEFT|Start_Final_Left_Left]] [[GRAB RIGHT|Start_Final_Left_Right]]\n<<endif>>",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ],
        "conditional": "this.conditional = function(){ try{if( $Stone==1) { return `\\\nTHE STONES DISAPPEAR\nTHERE IS NOTHING LEFT\n\n[[GO BACK|Start_Final_Puzzle]]\n`;} else { return `\\\nTHE STONES PULL YOU CLOSER\nYOU STAND STRONG\n\n[[GRAB LEFT|Start_Final_Left_Left]] [[GRAB RIGHT|Start_Final_Left_Right]]\n`} }  catch(ex){console.log(ex); return ex.toString();}  } "
    },
    {
        "nodeId": "Start_Final_Left_Left",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU GRAB THE STONE ON THE RIGHT\nA HAMMER IS ETCHED IN\n<<set $Left_Stone_Hammer to 1; $Stone to 1>>\n[[HEAD BACK|Start_Final_Right]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Left_Right",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU GRAB THE STONE ON THE LEFT\nA BLOODY KNIFE IS ETCHED IN\n<<set $Right_Stone_Knife to 1; $Stone to 1>>\n[[HEAD BACK|Start_Final_Right]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Right_Left",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU GRAB THE STONE ON THE RIGHT\nA CHALICE IS ETCHED IN\n<<set $Right_Stone_Chalice to 1; $Stone to 1>>\n[[HEAD BACK|Start_Final_Right]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Right_Right",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU GRAB THE STONE ON THE LEFT\nA RING IS ETCHED IN\n<<set $Right_Stone_Ring to 1; $Stone to 1>>\n[[HEAD BACK|Start_Final_Right]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Hammer",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE DOOR OPENS TO REVEAL A SINGLE HAMMER\nWHERE COULD YOU USE THIS\n\nthe player would, at this point turn around and go back to the door at the rat nest, but for the sake of convenience here we'll just [[TELEPORT THEM|Start_Ratnest_Door]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Chalice",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE DOOR CRUMBLES TO PIECES\nYOU WATCH THE ROCKS TURN TO DUST\n\n[[STEP THROUGH|Crypt_Main_Entrance]]\n",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Knife",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE DOOR DOES NOT OPEN\nA KNIFE IS IN YOUR HANDS\n\n[[DROP KNIFE|Start_Final_Knife_Drop]] [[HIT DOOR|Start_Final_Door_Hit]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Ring",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THE DOOR CRUMBLES TO PIECES\nYOU WATCH THE ROCKS TURN TO DUST\n\n[[STEP THROUGH|Wormhole_Main_Entrance]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Knife_Drop",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU TRY TO DROP THE KNIFE\nIT IS POINTLESS\n\n[[STAB|Start_Final_Door_Stab]] [[WAIT|Start_Final_Door_Wait]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Door_Hit",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "YOU HIT THE DOOR WITH THE KNIFE\nIT IS POINTLESS\n\n[[STAB|Start_Final_Door_Stab]] [[WAIT|Start_Final_Door_Wait]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Door_Stab",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You refuse. \n\nYou won't play by this stupid game's rules.\n\nYou've had it with walking through these corridors talking to people who, at this point, won't matter.\n\nThere is one way that you can fix it.\n\nOne way that you can stop the pain.\n\nOne way that you can stop them.\n\nThe ones trapping you here.\n\nYou are not their pawn.\n\nYou are you.\n\nRight?\n\nYou slide the dagger into your heart.\n\nThe only part of you they will never rip from your dead corpse.\n\nGAME OVER",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Start_Final_Door_Wait",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "You wait. You are not sure what you are waiting for. Perhaps it is for the door to open itself on it's own volition. Perhaps you are simply seeing how long you can survive down here in isolation. Not very long, you soon find out. The hunger hit first, followed slowly by insanity. The combination of the two would cause anyone to see you as a madman. That's exactly what you are now. Simply destined to be a creature locked in this place, waiting for the next \"hero\" to mistakingly take the same path as you.\n\nYou will be waiting.\n\nYou will be watching.\n\nYou sit still, waiting in a silence that is only broken by the occasional echo of your giggles.\n\nGAME OVER",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Wormhole_Main_Entrance",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "THERE IS ANOTHER DOOR\nIT BREATHES IN AND OUT\n\n[[ENTER|Wormhole_Main_Start]]",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Crypt_Main_Start",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Double-click this passage to edit it.",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    },
    {
        "nodeId": "Wormhole_Main_Start",
        "map": {
            "x": 27,
            "y": 19
        },
        "images": [
            "./app/images/corridor/2_far.png",
            "./app/images/corridor/2_close.png"
        ],
        "raw": "Double-click this passage to edit it.",
        "rawer": {},
        "decisions": [],
        "init": [
            "(revive:eval)",
            "(function () {\n\n\t\t\tvar reg = new RegExp(/\\[\\[.*/g);\n\n\t\t\t/*if (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}*/\n\t\t\tif (typeof this.conditional !== 'undefined') {\n\t\t\t\tthis.conditionalFunction = eval(this.conditional);\n\t\t\t\tthis.header = this.conditionalFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.header = this.raw;\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"[[\") != -1) {\n\t\t\t\tvar result = this.header.match(reg);\n\t\t\t\tif (result !== null) {\n\n\t\t\t\t\tfor (j = 0; j < result.length; j++) {\n\t\t\t\t\t\tvar decisions = \"[\" + result[j].replace('[[[[', '[[').replace(']]]]', ']]').replace(/\\[\\[/g, '{\"').replace(/\\]\\]/g, '\"},').replace(/\\|/g, '\":\"') + \"]\";\n\t\t\t\t\t\tdecisions = decisions.replace(\",]\", \"]\")\n\t\t\t\t\t\tdecisions = JSON.parse(decisions);\n\t\t\t\t\t\tfor (d = 0; d < decisions.length; d++) {\n\t\t\t\t\t\t\tvar decision = decisions[d];\n\t\t\t\t\t\t\tfor (var property in decision) {\n\t\t\t\t\t\t\t\tif (decision.hasOwnProperty(property)) {\n\t\t\t\t\t\t\t\t\tvar description = property;\n\t\t\t\t\t\t\t\t\tvar goto = decision[property];\n\t\t\t\t\t\t\t\t\tthis.decisions.push({ description: description, goto: goto })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//this.decisions.push(decisions)\n\t\t\t\t\t\tthis.header = this.header.replace(result[j], '');\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.header = this.header.replace(/(\\r\\n|\\n|\\r)/gm, \".\").replace(/\\.+/g, '. ').replace('?.', '? ').replace('!.', '! ').replace(/  /g, ' ').replace(/\\\\\\. /g, '').replace(\"<>\", '');\n\t\t\tthis.commands = \"\";\n\n\t\t\tif (this.header.indexOf(\"{{set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/{{set.*}}/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"{{set\", \"\").replace(\"}}\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/{{set.*}}/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.header.indexOf(\"<<set\") !== -1) {\n\t\t\t\tvar logic = this.header.match(/<<set.*>>/g)\n\t\t\t\tif (logic != null) {\n\t\t\t\t\tfor (m = 0; m < logic.length; m++) {\n\t\t\t\t\t\tvar newCommand = logic[m].replace(\"<<set\", \"\").replace(\">>\", \";\").replace(/to/g, \"=\").replace(/:/g, \";\");\n\t\t\t\t\t\tthis.header = this.header.replace(/<<set.*>>/, \"\");\n\t\t\t\t\t\tthis.commands = this.commands + newCommand;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof this.commands !== 'undefined') {\n\t\t\t\teval(this.commands);\n\t\t\t}\n\t\t\tthis.header = this.header.replace(/\\. *\\./, '.')\n\t\t})"
        ]
    }
]